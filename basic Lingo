! 2022.1.12

* 基本运算符
    ** 1、算数运算符
         取反 -
	 乘方 ^
	 乘   *
	 除   /
	 加   +
	 减   -
	 
	 *** 1）Lingo唯一的医院运算符是取反函数
	     2）运算符的优先级由高到低为：取反 --> 减
	     3）运算次序可以用圆括号“（）”改变

    ** 2、逻辑运算符
         #not#  否定该操作数的逻辑值，#not#是一个一元运算符
	 #eq#   若两个运算数相等，则为true;否则为false
	 #ne#   若两个运算符不相等，则为true;否则为false
	 #gt#   若左边的运算符严格大于右边的运算符，则为true;否则为false
	 #lt#   若左边的运算符严格小于右边的运算符，则为true;否则为false
	 #ge#   若左边的运算符大于或等于右边的运算符，则为true;否则为false
	 #le#   若左边的运算符小于或等于右边的运算符，则为true;否则为false
	 #and#  仅当两个参数都为true时，结果为true;否则为false
	 #or#   仅当两个参数都为false时，结果为false;否则为true
	 前7个运算符优先级高
	 后2个运算符优先级低

	 g:greater
	 e:equal
	 l:less
	 n:not
	 t:than

    ** 3、关系运算符
         Lingo由三种关系运算符：“=” “<=” “>=”。Lingo中还能用“<”表示小于等于关系，
	 “>”表示大于等于关系。Lingo并不支持严格小于和严格大于关系运算符。
	 然而，如果需要严格小于和严格大于关系，比如让A严格小于B：
	                                                A < B
	 那么可以把它变成如下的小于等于表达式：
	                                     A + ε <= B(ε是一个小的正数)

* Lingo函数
    ** 数学函数
         1、abs(x):            返回x的绝对值
	 2、exp(x):            返回常数e的x次方
	 3、sin(x):            返回x的正弦值，x采用弧度制
	 4、log(x):            返回x的自然对数
	 5、cos(x):            返回x的余弦值
	 6、lgm(x):            返回x的gamma函数的自然对数 （gamma函数：阶乘函数在实数与复数上扩展的一类函数）
	 7、tan(x):            返回x的正切值
	 8、sign(x):           如果x<0返回-1；否则返回1
	 9、smax(x1,x2...xn):  返回x1,x2..xn中的最大值
	 10、smin(x1,x2...xn): 返回x1,x2...xn中的最小值
	 11、floor(x)返回x的整数部分。当x>=0,返回不超过x的最大整数
	                               当x<0时，返回不低于x的最大整数

* Lingo注意事项
    ** 1、Lingo中模型以“MODEL:”开始，以“END”结束，对于简单的模型，这两个语句都可以省略
    ** 2、Lingo中每行后面均增加了一个分号“；”；
    ** 3、所有符号都需在英文状态下输入
    ** 4、min = 函数、max = 函数，表示求函数的最小、最大值
    ** 5、Lingo中变量不区分大小写，变量名可以超过8个，但不能超过32个，需以字母开头
    ** 6、用Lingo解优化模型时已假定所有变量非负，如果想解除这个限制可以用函数 @free(x),这样x可以
          取到任意实数
    ** 7、变量可以放在约束条件右端，同时数字也可以放在约束条件左边
    ** 8、Lingo模型语句由一系列语句组成，每一语句都必须以“；”结尾
    ** 9、Lingo中以“;”结尾
    ** 10、Lingo中以“!”开始的是说明语句，说明语句也以“;”结束 

         *** 例题：
	      某工厂有两条生产线，分别用来生产 M 和 P 两种型号的产品，利润分别为200元/个和300元/个，
	      生产线的最大生产能力分别为每日100和120，生产线每生产一个 M 产品需要 1 个劳动日
	      (1 个工人工作 8 小时称为 1 个劳动日)进行调试、检测等工作，而每个P产品需要2个劳动日，该厂工人每天共计能提
              供160劳动日，假如原材料等其他条件不受限制，问应如何安排生产计划，才能使获得的利润最大？
	      **** MAX = 200*x1 + 300*x2;
	           x1 <= 100;
		   x2 <= 120;
		   x1 + 2*x2 <= 160;
	 *** 1、简单线性规划求解
	           model:
		     max = 4*x1 + 3*x2;
		     2*x1 + x2 < 10;
		     x1 + x2 < 8;
		     x2 < 7;
		   end
	      
	      2、整数规划求解
	           model:
		     max = 40*x1 + 90*x2;
		     9*x1 + 7*x2 < 56;
		     7*x1 + 20*x2 < 70;
		     @gin(x1);   !取整数
		     @gin(x2);
		     end

	      3、0-1规划求解
	           例：Max f=x1^2 + 0.4x2 + 0.8x3 + 1.5x4
		       3x1 + 2x2 + 6x3 + 10x4 ≤ 10
		       x1,x2,x3,x4 = 0或1
		   model:
		      Max = x1^2 + 0.4*x2 + 0.8*x3 + 1.5*x4;
		      3*x1 + 2*x2 + 6*x3 + 10*x4 < 10;
		      @bin(x1);
		      @bin(x2);
		      @bin(x3);
		      @bin(x4);
		   end

	      4、非线性规划求解
	           例：max z = |x1| -2|x2| - 3|x3| + 4|x4|
		       
		       x1 - x2 - x3 + x4 = 0
		       x1 - x2 + x3 - 3x4 = 1
		       x1 - x2 - 2x3 + 3x4 = -1/2
		   model:
		        max = @abs(x1) - 2*@abs(x2) - 3@abs(s3) + 4@abs(s4);
			x1 - x2 - x3 + x4 = 0;
		        x1 - x2 + x3 - 3*x4 = 1;
		        x1 - x2 - 2*x3 + 3*x4 = -1/2;
			@free(x1);
			@free(x2);
			@free(x3);
			@free(x4);
		   end

！2022.1.13

* Lingo编程 段语言的编写
         ** 段编程的优点
	      对于数学规划问题，一般选用Lingo程序求解，其优点：
	      1、模型简单整齐，便于理解
	      2、Lingo程序语言规范，计算速度快
	      3、Lingo软件比较小，安装方便快捷
	 ** 段编程的程序结构
	      Lingo程序一般以“Model:”开始，“End”结束。
	      在程序中若没有Model和End也能执行，但是最好还是写完整标准的程序，主要为五段架构
              Model:
	      Title "Example";
	      ......
	      ......
	      END

	      在程序中可以对模型进行命名，注意命名最多为72个字母

	      集合段 数据段 初始段 计算段 目标和约束段
	      五段中目标和约束段一般时不可少的，集合段用的比较多，数据段次之，
	      初始段和计算段不一定有。这些段的顺序可调换
	           *** 1、集合段：以“SETS:”开始，“ENDSETS”结束，定义必要的
		                   集合变量及其元素（含定义类似数组的下标）和属性
				  **** SETS:
				       Car /1..2/:a, b;  !a1 a2 b1 b2
				       Box /1..6/:c, d;  !c1 c2..c6 d1 d2..d6
				       Link(Car, Box):x; !x11 x12..
				       ENDSETS

		   *** 2、数据段：以“DATA:”开始，“ENDDATA”结束，对集合的属性（数组）
		                   输入必要的常数数据。常数列表中的数据之间可以
				   逗号“,”分开，也可以用空格分开
				  **** DATA:
				       a = 1, 2, 3, 4, 5, 6;
				       b = 7 8 9 10 11;
				       c = 12 13 14 15;
				       ENDDATA

		   *** 3、初始段：以“INIT:”开始，“ENDINIT”结束，对集合的属性（数组）定义初值（因为
		                   求解算法是迭代算法，如能给一个比较好的初值，对提高算法的计算效果
				   是非常有益的）。与数据段中的用法类似
				  **** INIT:
				       x,y = 1,2,3,4,5,6,7,8,9,10,11,12; !即(x, y) = (1,2)(3,4)...
				       ENDINIT

		   *** 4、计算段：以“CALC:”开始，“ENDCALC”结束，对一些原始数据进行计算处理。在实际问题中，
		                   原始数据不一定能在模型中直接使用，可以用计算段对原始数据进行一定的“预处理”
				   得到在模型中可以使用的数据
				  **** CALC:
				       Total Number = 
				            @sum(Car(i): a(i)*b(i));
				       ENDCALC

		   *** 5、目标与约束段：目标函数、约束条件等没有段的开始和结束标记，因此实际上就是除了
		                         其它四个段（都有明确的段标记）外的LINGO模型。它是LINGO程序最重要的部分
					**** Min = @sum(box:c+d);
					@for(Car(i):a(i)+b(i) < 10);
					@for(Link:@bin(x)); 

         ** 段的使用
	      *** 1、 @size() 函数用于确定集合中元素的个数。
	           **** 例如：
		        s1/a b c d f g/:x;
			m = @size(s1)  !返回数值6
                  2、 @for() 该函数用来表示线性规划中的约束条件
		   **** 例如：
		        sets:
			r/1..8/:d;
			c/1..8/:;     !就算没有集合属性也要写":"
			link(r,c):x,y !派生集合
			endsets
			@for(r(i):@for(c(j):x(i,j) <= y(i,j))); !可用@for(link:x<=y)代替
			@for(r(i)|i#ge#2:d(i)>=3)               !":"前说的是对哪个集合进行约束，":"后面说的是具体是什么约束
			                            !"|"表示过滤，即筛选r(i)下标集中i>=2,即/2,3..8/
		  3、 @sum() 该函数用来求和，格式： @sum(setname(i):x(i))

		  4、 @bin 表示的是0，1变量，是对题目的约束进行简化的有效函数
	           
	     
	      *** 1、怎样表示 Σ[i=1 到 100] xi ≤ 90
	           sets: !集合段
		   s/1...100/:x; !基本集合，集合名与属性变量；
		   endsets
	           !目标与约束段
		   @sum(s(i):x(i))<90; !循环求和函数

		   2、怎样赋值（数据段）：
		    sets:
		    ss/1..9/:b;
		    endsets
		    data: !数据段；
		    b = 1 0 1 2 3 5 2 6 1; %b1=1,b2=0,..b9=1
		    enddata

		   3、怎样表示：xij为0-1变量，i=1,2,...,100
		                               j=1,2,...,200
		     sets:
		     a/1..100/:; b/1..100/:;
		     c(a,b):x;
		     endsets
		     @for(c(i,j)): @bin(x(i,j));

		   4、怎样表示约束：Σ[i=1 到 100] Σ[j=1 到 200]xij = 280?
		    sets:
		    a/1..100/:; b/1..200/:;
		    C(a, b):x;   !派生集合
		    endsets
		    @sum(C(i,j):x(i,j)) = 280

		   5、怎么表示多个约束：Σ[i=1 到 100] xij ≥ 150，j = 1,2,...,200
		    sets:
		    a/1..100/:;
		    b/1..200/:;
		    c(a, b):x;
		    endsets
		    @for(b(j): @sum(a(i): x(i,j)) >150); !集合元素的循环函数
                      
		   6、怎样表示过滤语句：Σ[ 2≤k≤40 k≠10] xijk = 100，i = 1..20, j = 1..30
		    sets:
		    a/1..20/:;
		    b/1..30/:;
		    c/1..40/:;
		    d(a, b, c):x;
		    @for(a(i): @for(b(j): 
		    @sum(c(k)| k#gt#1#and#k#ne#10:x(i, j, k)) = 100)); !过滤条件;

              *** 注意事项：
	           1. 使用的字母没有定义
		   2. 定义了同名的属性
		   3. 分号不是英文半角输入
		   4. 循环语句中元素下标颠倒或者不明
		   5. 定义了多个长度一样的集合，而在使用中区分不明确
		   6. 约束错误变成不可行或无界
		   7. 关系运算符(如：“=”)使用逻辑运算符(如：“#EQ#”)
		   8. 使用了非LINGO语句的输入；（比如%引导说明语句）
		   9. 函数调用错误
		   10.掉了或多了括号，函数的括号写错了地方
                  
                   程序调试：
		   1. 直接点击运行，如果出错会弹出错误提示，根据提示做出相应的修改
		   2. 可以用“!”把约束变成说明语句，而把这条语句屏蔽掉，缩小寻找出错范围
		   3. 可以边写程序边运行，保证每行书写都是正确的程序

	      *** 段编程经典案例：
	           **** 阶段生产问题（见word【Lingo】）
